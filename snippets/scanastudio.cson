#Some snippets to help ScanaStudio user to get started with a new decoder

'.source.js':

  'ScanaStudio object':
    'prefix': 'ScanaStudio'
    'body': 'ScanaStudio$1'


  'ScanaStudio meta-info template':
    'prefix': 'template-meta-info'
    'body': """
    /* Protocol meta info:
    <NAME> ${1:My Protocol} </NAME>
    <DESCRIPTION>
    ${2:My protocol can decode pretty much any logic signal!}
    </DESCRIPTION>
    <VERSION> 0.0 </VERSION>
    <AUTHOR_NAME>	${3:Your name} </AUTHOR_NAME>
    <AUTHOR_URL> ${4:your@email.or.website} </AUTHOR_URL>
	<AUTHOR_URL> ${5:https://github.com/ikalogic/ScanaStudio-scripts-v3/wiki} </AUTHOR_URL>
    <COPYRIGHT> Copyright ${3:your name} </COPYRIGHT>
    <LICENSE>	This code is distributed under the terms of the GNU General Public License GPLv3 </LICENSE>
    <RELEASE_NOTES>
    V0.0:  Initial release.
    </RELEASE_NOTES>
    */
    """

  'on_decode_signals() function template':
    'prefix': 'template-decode-signals'
    'body': """
    //Global variables
    var sampling_rate;
    var state_machine;

    function on_decode_signals(resume)
    {
      if (!resume) //If resume == false, it's the first call to this function.
      {
          //initialization code goes here, ex:
          state_machine = 0;
          sampling_rate = ScanaStudio.get_capture_sample_rate();
          // read GUI values using ScanaStudio.gui_get_value("ID");
          ${1://...}
      }

      while (ScanaStudio.abort_is_requested() == false)
      {
        switch (state_machine)
        {
          case 0:
            //Todo...
            break;
          case 1:
            //Todo...
            break;
          default:
            //Todo...
        }
      }
    }
    """

  'on_draw_gui_decoder() function template':
    'prefix': 'template-gui-decoder'
    'body': """
    //Decoder GUI
    function on_draw_gui_decoder()
    {
      //Define decoder configuration GUI
      ScanaStudio.gui_add_ch_selector("${1:id}","${2:caption}","${3:new_channel_name}");
      ${4://Add other gui functions...}
    }
    """

  'BuilderObject template':
    'prefix': 'template-builder-object'
    'body': """
    //Builder object that can be shared to other scripts
    ScanaStudio.BuilderObject = {
      //to be configured by the user of this object using the setter functions below
      channel: 0,
      sampling_rate: 1e6,
    	build_cycle : function(parameter)
      {
        //Todo: write your code!
      },
      set_channel : function(ch)
      {
        this.channel = ch;
      },
      set_sample_rate : function(sr)
      {
        this.sampling_rate = sr;
      }
    };
    """

  'on_build_demo_signals() function template':
    'prefix': 'template-demo-signals'
    'body': """
    //Function called to generate demo siganls (when no physical device is attached)
    function on_build_demo_signals()
    {
      //Use the function below to get the number of samples to be built
      var samples_to_build = ScanaStudio.builder_get_maximum_samples_count();
      //Todo: build the demo signals
    }
    """

  'on_build_signals() function template':
    'prefix': 'template-build-signals'
    'body': """
    //Function called to build siganls (to be generate by capable device)
    function on_build_signals()
    {
      //Use the function below to get the number of samples to be built
      var samples_to_build = ScanaStudio.builder_get_maximum_samples_count();
      //Todo: build the signals
    }
    """

  'on_draw_gui_trigger() function template':
    'prefix': 'template-gui-trigger'
    'body': """
    //Trigger sequence GUI
    function on_draw_gui_trigger()
    {
      ${4://Add gui functions...}
    }
    """

  'on_draw_gui_signal_builder() function template':
    'prefix': 'template-gui-signal-builder'
    'body': """
    //Signal builder GUI
    function on_draw_gui_signal_builder()
    {
      ${4://Add gui functions...}
    }
    """

#define SCRIPT_FUNCTION_DEMO        "build_demo_signals"
# Work in progress
#define SCRIPT_FUNCTION_DECODE      "decode_signals"
#define SCRIPT_FUNCTION_BUILD       "build_signals"
#define SCRIPT_FUNCTION_DEMO        "build_demo_signals"
#define SCRIPT_FUNCTION_TRIGGER     "build_trigger"

#define SCRIPT_FUNCTION_DEC_GUI     "gui_decoder"
#define SCRIPT_FUNCTION_TRG_GUI     "gui_trigger"
